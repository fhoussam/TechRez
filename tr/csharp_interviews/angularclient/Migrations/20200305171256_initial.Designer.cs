// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using angularclient;

namespace angularclient.Migrations
{
    [DbContext(typeof(JhDbContext))]
    [Migration("20200305171256_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("jh.Entities.CachedUrl", b =>
                {
                    b.Property<int>("CachedUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("SearchJobId")
                        .HasColumnType("int");

                    b.HasKey("CachedUrlId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SearchJobId");

                    b.ToTable("CachedUrls");
                });

            modelBuilder.Entity("jh.Entities.DescriptionUrlTransformer", b =>
                {
                    b.Property<int>("DescriptionUrlTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Replacer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DescriptionUrlTransformerId");

                    b.HasIndex("ProviderId");

                    b.ToTable("DescriptionUrlTransformers");

                    b.HasData(
                        new
                        {
                            DescriptionUrlTransformerId = 2,
                            ProviderId = 2,
                            Replacer = "voir-emploi",
                            Value = "rc/clk"
                        });
                });

            modelBuilder.Entity("jh.Entities.Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeywordId");

                    b.ToTable("Keywords");

                    b.HasData(
                        new
                        {
                            KeywordId = 1,
                            IsRequired = true,
                            Value = "wcf"
                        },
                        new
                        {
                            KeywordId = 2,
                            IsRequired = true,
                            Value = "asp"
                        },
                        new
                        {
                            KeywordId = 3,
                            IsRequired = true,
                            Value = "c#"
                        },
                        new
                        {
                            KeywordId = 4,
                            IsRequired = true,
                            Value = "csharp"
                        },
                        new
                        {
                            KeywordId = 5,
                            IsRequired = true,
                            Value = "dotnet"
                        },
                        new
                        {
                            KeywordId = 6,
                            IsRequired = true,
                            Value = "asp.net"
                        },
                        new
                        {
                            KeywordId = 7,
                            IsRequired = false,
                            Value = "jquery"
                        },
                        new
                        {
                            KeywordId = 8,
                            IsRequired = false,
                            Value = "core"
                        },
                        new
                        {
                            KeywordId = 9,
                            IsRequired = false,
                            Value = "angular"
                        },
                        new
                        {
                            KeywordId = 10,
                            IsRequired = false,
                            Value = "anglais"
                        },
                        new
                        {
                            KeywordId = 11,
                            IsRequired = false,
                            Value = "english"
                        },
                        new
                        {
                            KeywordId = 12,
                            IsRequired = false,
                            Value = "senior"
                        },
                        new
                        {
                            KeywordId = 13,
                            IsRequired = false,
                            Value = "openid"
                        },
                        new
                        {
                            KeywordId = 14,
                            IsRequired = false,
                            Value = "oauth"
                        },
                        new
                        {
                            KeywordId = 15,
                            IsRequired = false,
                            Value = "mssql"
                        },
                        new
                        {
                            KeywordId = 16,
                            IsRequired = false,
                            Value = "identity"
                        },
                        new
                        {
                            KeywordId = 17,
                            IsRequired = false,
                            Value = "visual studio"
                        },
                        new
                        {
                            KeywordId = 18,
                            IsRequired = false,
                            Value = "sql server"
                        },
                        new
                        {
                            KeywordId = 19,
                            IsRequired = false,
                            Value = "windows communication foundation"
                        },
                        new
                        {
                            KeywordId = 20,
                            IsRequired = false,
                            Value = "aws"
                        },
                        new
                        {
                            KeywordId = 21,
                            IsRequired = false,
                            Value = "docker"
                        },
                        new
                        {
                            KeywordId = 22,
                            IsRequired = true,
                            Value = "webform"
                        },
                        new
                        {
                            KeywordId = 23,
                            IsRequired = true,
                            Value = "winform"
                        },
                        new
                        {
                            KeywordId = 24,
                            IsRequired = true,
                            Value = "asmx"
                        });
                });

            modelBuilder.Entity("jh.Entities.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DateExtractor")
                        .HasColumnType("int");

                    b.Property<string>("DatePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmptyPageIndicatorPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsJobIdInQueryParam")
                        .HasColumnType("bit");

                    b.Property<string>("ListUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublisherPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitlePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UrlTransformer")
                        .HasColumnType("int");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            ProviderId = 1,
                            DatePath = "//div[contains(@class, 'roffre')]/div/div[2]/span[2]",
                            DescriptionPath = "//div[@id = 'divcontmain-pad']/div[2]/div[3]",
                            EmptyPageIndicatorPath = "//div[contains(@class, 'roffre')]",
                            IsJobIdInQueryParam = false,
                            ListUrl = "https://www.freelance-info.fr/missions.php?f=ile_de_france&mots={keyword}&tri=date&p={pageindex}",
                            PublisherPath = "//div[contains(@class, 'roffre')]/div/div[1]/div/img",
                            TitlePath = "//div[contains(@class, 'roffre')]/div/div[2]/div[1]",
                            UrlPath = "//div[contains(@class, 'roffre')]/div/div[2]/div[1]/a"
                        },
                        new
                        {
                            ProviderId = 2,
                            DatePath = "//div[contains(@class, 'result-link-bar')]/div/span[contains(@class, 'date')]",
                            DescriptionPath = "//div[contains(@class, 'jobsearch-JobComponent-description')]",
                            EmptyPageIndicatorPath = "//div[contains(@class, 'jobsearch-SerpJobCard')]",
                            IsJobIdInQueryParam = true,
                            ListUrl = "https://www.indeed.fr/emplois?as_and={keyword}&as_phr=&as_any=&as_not=&as_ttl=&as_cmp=&jt=subcontract&st=&as_src=&salary=&radius=25&l=%C3%8Ele-de-France&fromage=any&limit=50&sort=date&psf=advsrch&from=advancedsearch",
                            PublisherPath = "//div[contains(@class, 'sjcl')]/div/span[contains(@class, 'company')]",
                            TitlePath = "//div[contains(@class, 'title')]",
                            UrlPath = "//div[contains(@class, 'title')]/a"
                        });
                });

            modelBuilder.Entity("jh.Entities.ResultEntity", b =>
                {
                    b.Property<int>("ResultEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SearchJobId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultEntityId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SearchJobId");

                    b.ToTable("ResultEntities");
                });

            modelBuilder.Entity("jh.Entities.SearchJob", b =>
                {
                    b.Property<int>("SearchJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DurationInMs")
                        .HasColumnType("float");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SearchJobId");

                    b.ToTable("SearchJobs");
                });

            modelBuilder.Entity("jh.Entities.UrlSpecialCharacter", b =>
                {
                    b.Property<int>("UrlSpecialCharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Replacer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("UrlSpecialCharacterId");

                    b.HasIndex("ProviderId");

                    b.ToTable("UrlSpecialCharacters");

                    b.HasData(
                        new
                        {
                            UrlSpecialCharacterId = 1,
                            ProviderId = 1,
                            Replacer = "%23",
                            Value = "#"
                        },
                        new
                        {
                            UrlSpecialCharacterId = 2,
                            ProviderId = 2,
                            Replacer = "%23",
                            Value = "#"
                        });
                });

            modelBuilder.Entity("jh.Entities.CachedUrl", b =>
                {
                    b.HasOne("jh.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jh.Entities.SearchJob", "SearchJob")
                        .WithMany()
                        .HasForeignKey("SearchJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("jh.Entities.DescriptionUrlTransformer", b =>
                {
                    b.HasOne("jh.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("jh.Entities.ResultEntity", b =>
                {
                    b.HasOne("jh.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jh.Entities.SearchJob", "SearchJob")
                        .WithMany("ResultEntity")
                        .HasForeignKey("SearchJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("jh.Entities.UrlSpecialCharacter", b =>
                {
                    b.HasOne("jh.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
