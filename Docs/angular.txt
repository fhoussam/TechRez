when using ngclass with multiple condition, be ware of class NAMES having spaces within them, you should incllude the mitual one in the "class" attribut while the variations in "[ngClass]" attribut, example : class="glyphicon" [ngClass]="{'glyphicon-triangle-bottom': productFilter.orderColumn=='description' && productFilter.isDesc, 'glyphicon-triangle-top': productFilter.orderColumn=='description' && !productFilter.isDesc}"
conditional style : [ngStyle]="{'background-color': getTrBackgroundColor(product) }"
for loop : <tr *ngFor="let product of products"
click event : <td><span class="glyphicon glyphicon-remove" (click)="deleteProdut(product.id)"></span></td>
passing data to other components : <app-childcomp [childprop]="selectedProduct"></app-childcomp>, where '@Input() childprop: string'
when using visual studio, you should cd to ClientApp folder before using angular CLI
cutom pipes : DO NOT use class name in the html, use the selector f that pipe, only need to generated the pipe and use it on the html right away
ngStyle : if 'style' atribut is used with it, it simply gonna be appllied no matter what ngif condition is satisfied
angular uses default html5 validation attributs to apply form validation (required, minlength, maxength, etc)
[class.<class name>]="typecript boolean expression" attribut can be used as an alternative of ngClass or ngStyle
when using foms : <form #editproductform="ngForm" (ngSubmit)="updateProduct()"> -> each field has to have "name" attribut defined
() for events
[] for boolean expression
*ng--- for if and loop

when using multiple validation messages like this, which is usually the case, consider this :
    <div class="alert alert-danger" *ngIf="productdescription.touched && !productdescription.valid">
      <div *ngIf="productdescription.errors.required">Product description is required !</div>
      <div *ngIf="productdescription.errors.minlength">Should be minimum of {{productdescription.errors.minlength.requiredLength}} catacters !</div>
      <!--<div *ngIf="productdescription.errors.pattern">Should match the pattern !</div>-->
    </div>
	- productdescription is a typecript object that holds validation data for a particular filed or aan entire form
	- we can use the change event to log productdescription object and inspect all it's properties
	- typescript is case sensitive, so be careful that minlength and requiredLength properties do not respect the same naming convention

Validation
  <div class="form-group">
    <input type="text"
           required
           placeholder="First name"
           class="form-control"
           ngModel name="firstName"
           #firstName="ngModel"
           (change)="log(firstName)"
           minlength="3"
           maxlength="10"
           pattern="banana"
    />
    <div class="alert alert-danger" *ngIf="firstName.touched && !firstName.valid">
      <div *ngIf="firstName.errors.required">First name is required !</div>
      <div *ngIf="firstName.errors.minlength">Should be minimum of {{firstName.errors.minlength.requiredLength}} catacters !</div>
      <div *ngIf="firstName.errors.pattern">Should match the pattern !</div>
    </div>
  </div>
	
	ng g @angular/material:material-table --name=[name]

<app-product-detail [product]="selectedProduct"></app-product-detail> -> child prop must be declared like this  : @Input() childMessage: string; !!! HA
when do we use *ng and [ng--] ?
[(ngModel)]=""

when getting data from server, the returned data is deseriaized using a ts class, so, if this class proporties have capital letters, dont try to get to match the case, because at browser level, everything is lower case. for example, product class had Description prop, on the html template i've tried accessing it while respecting the case,. pro tip, alwys console.log your object to view their real props are named at browser level.

	this one did not work
	<div *ngFor="let product of products">
	  {{ product.Description }}
	</div>
	
	this one worked.
	<div *ngFor="let product of products">
	  {{ product.description }}
	</div>
	
http client :
	after getting data from api, convert it from observable to raw : .subscribe(data => { this.products = data; });
	
when returning data list, the variable that catche data must be declred this way : public products = [];, 'public' so the html part can see it.

it's also recomended to use interfaces to deseriaize the returned data :
	export interface IProduct
	{
	  Id: number;
	  Description: string;
	  ...
	}





angular universal

Template
Class
Decorator

Class syntax
	[export] class <ClassName> 
	{
		<propName> : <proptype> [ = <value>];
	}
the export keyword is used to let the class be imported by files

import {<component name>} from @"<somewhere>" -> same as using in c#. also, when specifying "from" first, you get component name intellisens

create new component using terminal
	$ ng g component component/user
	https://www.youtube.com/watch?v=KhzGSHNhnbI&t=1525s / 23:45
	
app module is the module that bootsraps the app, usualy respects the naming convention appmodule

type script :
	types : numbers, any, <type>[], boolean
	constructor(){}
	ngOnInit(){}
	ngInit interface ??

displaying an array :
<li *ngFor="let hobby of hobbies">{{hobbie}}<li> -> where hobbies is a prop defined in the component lass and having string[] as a type
we can also show the cuurent index like this : <li *ngFor="let hobby of hobbies; let i = index">{{i}} : {{hobbie}}<li> 

toggle a div
<div *ngIf=isEdit><div> where isEdit is boolean prop on the component

Events :
<button (click)="deleteProduct(product.id)">Click me</button> : again, onClick is a method defind in the component class, like this onClick(){ /*some logic*/ } !! no 'function' keyword is there !!. in that method you can also have access to component props

Forms :
<form (submit)="addHobby(hobby.value)">
	<div>
		<label for="hobby">Hobby:</label>
		<input type="text" #hobby>
	</div>
</form>

//unshift adds the element in the begging of an array, not like push :)
addHobby(hobby) { this.hobbies.unshift(hobby); }


<li *ngFor="let hobby of hobbies" >{{hobbie}}<button click("deleteHobby(hobby)")>X</button></li>
deleteHobby(hobby)
{
	for(let i=0; i<this.hobbies.length; i++)
	{
		if(this.hobbies[i] == hobby)
		{
			this.hobbies.splice(i, 1);
		}
	}
}

2way databinding
import { FormsModule } from '@angular/forms' then add it to NgModule Imports section
<form>
	<label for="email">email</label>
	<input type="text" [(ngModel)]="email">

http module
generate a service : $ ng g service service/data where service/data is the destination folder
unlike the component generator, this command does not update the NgModule, so 2 changes to be considered
	1 - importing the service -> import { DataService } from './services/data.service'
	2 - add the service to the Providers section -> Proviers : [DataService]
import the data service in the component that's gonna call it -> import {DataService} from '../../services/data.service'
whenever we wanna use a service we inject it though dependency injection using the component constructor like this constructor(privte dataservice:DataService)	
just like we did with the FormsModule, we add the HttpModule
in the DataService we import AND inject the http module like this, and then call our data api : 
	import {http} from @angular/http
	constructor(private http:Http)
	this.http.get(url);
this.http.get(url) returns ?observable?, se we need to convert it to json in 2 steps :
	import 'rxjs/add/operator/map'
	this.http.get(url).map(res => res.json()) 
to test API calls, we use mocked data in the jsonplaceholer website : https//jsonplaceholer/typicode.com/posts

routing
	import { RouterModule } from '@angular/router';
	define routes : 
		const appRoutes: Routes = [
			{path:'', component:userComponent}
			{path:'about', component:aboutComponent}
		];
	-> where '' is the home page
	in the imports section, we add RouterModule.forRout(appRoutes)
	add the html to the app component
	<ul>
		<li> </li>
		<li></li>		
	</ul>
	
to generate  new coomponent we can alos use '$ng g c employees'

to shortn path on vscode, use 'prompt $$' command

install angular CLI
	https://github.com/angular/angular-cli/issues/503
	run npm install -g @angular/cli
	CLI commands
		start app : ng serve --open
		new component : ng g c components/user
		
no need to include a bootstraped component

ruun npm from vscode
https://stackoverflow.com/questions/35563802/running-npm-command-within-visual-studio-code

never name a project with the same file's name you create for your project! or simply let ng create the root project folder for you. run npm install before running ng serve

ngFor only accepts arrays, so when working with genric lists, we have to call ToArray method, so things can run smoothly



window.onload = ()=>{
  //ProductComponent.loadData();
}

this.Data.ElementAt

what is the difference between http and httpModule ?
when do we use import '' instead of import from ?
one form element per component ?
no self clsing elements ?
why is the return data observable instead of a simple json data ?